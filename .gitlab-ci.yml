# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:3.11

# Define the stages for the pipeline
stages:
  - setup
  - lint
  - bump
  - build
  - release
  - publish

# Pipeline rules
workflow:
  rules:
      # Prevent running a push pipeline for a release commit that's not a tag
    - if: $CI_COMMIT_MESSAGE =~ /^chore\(release\):.*/ && $CI_COMMIT_TAG == null
      when: never
      # If a push to branch with open merge request then ignore
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
      # If source is push and no open merge request then run
    - if: $CI_COMMIT_BRANCH
      # Run tag pipelines
    - if: $CI_COMMIT_TAG

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  VERSION_FILE: ".version"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/topics/caching/
#
# Default cache values
default:
  cache: &global_cache
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .cache/pypoetry
      - .cache/pip
      - .venv/
      - ./task
    policy: pull-push


# Anchor to use pull only cache
.use_cached_venv: &use_cached_venv
  before_script:
    - source .venv/bin/activate
  cache:
    <<: *global_cache
    policy: pull


.only_tag: &only_tag
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success
    - when: never


.no_tag: &no_tag
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success


.only_protected: &only_protected
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      when: on_success
    - when: never


# Anchor for docker jobs
.docker-job:
  image: docker:latest
  services:
    - docker:dind
  # Deactivate cache for docker jobs
  cache: []


# Setup job to install dependencies
build-env:
  stage: .pre
  script:
    - python -m venv .venv/
    - source .venv/bin/activate
    - pip install -U pip
    - pip install poetry
    - poetry install
      # Install go-task
    - sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b .
  rules:
      # If project dependencies were changed then run
    - changes:
      - flowdapt_sdk/
      - pyproject.toml
      - poetry.lock
      when: always
      # If .venv exists then skip
    - exists:       
      - .venv/
      when: never
    # Default to manual, but continue
    # pipeline if not run
    - when: manual
      allow_failure: true


lint:
  <<: *use_cached_venv
  <<: *no_tag
  stage: lint
  script:
    - ./task lint


lint-commit:
  <<: *use_cached_venv
  <<: *no_tag
  stage: lint
  script:
    - |
      # Get the commit message of the last commit
      commit_message=$(git log -1 --pretty=format:%s)

      # If the commit message starts with "Merge branch", it is a merge commit, so skip the linting.
      if [[ $commit_message == 'Merge branch'* ]]; then
        echo "Merge commit detected, skipping lint."
        exit 0
      fi

      pip install gitlint
      # Ensure the commit message is valid
      # We should always pass this as long as the pusher has the pre-commit hooks installed
      # but just as a sanity check we'll run it here
      git log -1 --pretty=%B | gitlint


bump-version:
  <<: *use_cached_venv
  <<: *only_protected
  variables:
    REPO_URL: "https://release-token:${RELEASE_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
  stage: bump
  before_script:
    - pip install -U commitizen
      # Set git info
    - git config --global user.email "$GIT_COMMIT_EMAIL"
    - git config --global user.name "$GIT_COMMIT_USER"
      # NOTE: Must be set to CLONE strategy in gitlab CI otherwise there will be
      # excess commits and tags from a dirty cache
    - git checkout $CI_COMMIT_BRANCH
    - git pull $REPO_URL $CI_COMMIT_BRANCH
      # Explicitly checkout branch since gitlab CI detaches
  script:
    # Bump the version
    - export CZ_BUMP_OUTPUT=$(cz bump --yes 2>&1)
    - export CZ_BUMP_EXIT_CODE=$?
    # Push new tag to trigger release workflow if bumped
    - echo $CZ_BUMP_OUTPUT
    - |
      if [[ $CZ_BUMP_EXIT_CODE -eq 21 ]]; then
        echo "Version did not change, no release will be made."
      else
        echo "Version changed."
        git push $REPO_URL $CI_COMMIT_BRANCH --tags
      fi


get-version:
  <<: *use_cached_venv
  stage: setup
  script:
    - export PROJECT_VERSION=$(poetry version --short)
    - echo $PROJECT_VERSION
    - echo "PROJECT_VERSION=$PROJECT_VERSION" > $VERSION_FILE
  artifacts:
    reports:
      dotenv: $VERSION_FILE


build-package:
  <<: *use_cached_venv
  <<: *only_tag
  stage: build
  script:
    - ./task build
  artifacts:
    name: dist
    paths:
      - dist/


make-release:
  <<: *only_tag
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "Building release $CI_COMMIT_TAG"
  release:
    name: Release $CI_COMMIT_TAG
    tag_name: $CI_COMMIT_TAG
    description: $CHANGELOG


publish-package:
  <<: *use_cached_venv
  <<: *only_tag
  stage: publish
  variables:
    PACKAGE_NAME: flowdapt-sdk
  script: |
      poetry config pypi-token.pypi $PYPI_TOKEN
      poetry publish